# Web UI
[include fluidd.cfg]

## Voron Design VORON2 250/300/350mm SKR 1.4 TMC2209 UART config

## *** THINGS TO CHANGE/CHECK: ***
## MCU paths							[mcu] section
## Thermistor types						[extruder] and [heater_bed] sections - See 'sensor types' list at end of file
## Z Endstop Switch location			[safe_z_home] section
## Z Endstop Switch  offset for Z0		[stepper_z] section
## Probe points							[quad_gantry_level] section
## Min & Max gantry corner postions		[quad_gantry_level] section
## PID tune								[extruder] and [heater_bed] sections
## Fine tune E steps					[extruder] section

##========================== Pin Definitions ========================
## X_STEP_PIN         2.2
## X_DIR_PIN          2.6
## X_ENABLE_PIN       2.1
## X_STOP_PIN         1.29
## E0_DET_PIN         1.26
## X_UART_PIN         1.10


## Y_STEP_PIN         0.19
## Y_DIR_PIN          0.20
## Y_ENABLE_PIN       2.8
## Y_STOP_PIN         1.28
## E1_DET_PIN         1.26
## Y_UART_RX          1.9


## Z_STEP_PIN         0.22
## Z_DIR_PIN          2.11
## Z_ENABLE_PIN       0.21
## Z_STOP_PIN         1.27
## PWR_DET_PIN        1.0
## Z_UART             1.8


## E0_STEP_PIN        2.13
## E0_DIR_PIN         0.11
## E0_ENABLE_PIN      2.12
## E0_UART            1.4


## E1_STEP_PIN        1.15
## E1_DIR_PIN         1.14
## E1_ENABLE_PIN      1.16
## E1_UART_RX         1.1


## HE1                2.4
## HE0                2.7
## BED                2.5
## TH1 (H1 Temp)      0.23
## TH0 (H0 Temp)      0.24
## TB  (Bed Temp)     0.25
## FAN                2.3
## SERVO              2.0
## PROBE			  0.10
##===================================================================

[mcu]
##	MCU for X/Y/E steppers main MCU
##	[X in X] - B Motor
##	[Y in Y] - A Motor
##	[E in E0] - Extruder
##	Obtain definition by "ls -l /dev/serial/by-id/" then unplug to verify
##--------------------------------------------------------------------
serial: /dev/serial/by-id/usb-Klipper_lpc1769_2810011505A5D795897A4662C52000F5-if00
##--------------------------------------------------------------------

[mcu z]
##	MCU for Z steppers
##	[Z in X] - Front Left
##	[Z1 in Y] - Rear Left
##	[Z2 in Z] - Rear Right
##	[Z3 in E0]- Front Right
##	Obtain definition by "ls -l /dev/serial/by-id/" then unplug to verify
##--------------------------------------------------------------------
serial: /dev/serial/by-id/usb-Klipper_lpc1768_10200001881C4AAFE65D685DC22000F5-if00
##--------------------------------------------------------------------

[virtual_sdcard]
path: /home/pi/printer_data/gcodes
on_error_gcode: CANCEL_PRINT

[printer]
kinematics: corexy
max_velocity: 500
max_accel: 20000    			#Max 7000, default 3000
# minimum_cruise_ratio: 0.5 # This left commented to not break older Klipper versions
max_z_velocity: 38 			#Max 15 for 12V TMC Drivers, can increase for 24V
max_z_accel: 350   			#Max ?
square_corner_velocity: 10.0  #Can experiment with 8.0, default 5.0

#####################################################################
# 	Stepper Settings
#####################################################################
[include stepper.cfg]

#####################################################################
# 	Extruder
#####################################################################
[include extruder.cfg]

#####################################################################
# 	Bed Heater
#####################################################################

[heater_bed]
##	SSR Pin - Z board, Fan Pin
heater_pin: z:P2.3
sensor_type: Generic 3950
sensor_pin: z:P0.25
##	Adjust Max Power so your heater doesn't warp your bed
max_power: 0.6
min_temp: 0
max_temp: 120
#control: pid
#pid_kp: 58.437
#pid_ki: 2.347
#pid_kd: 363.769

#####################################################################
# 	Exclude object
#   Enables support to exclude or cancel individual objects during the printing process.
#####################################################################

[exclude_object]

#####################################################################
# 	Probe
#####################################################################

[probe]
##	Inductive Probe
##	This probe is not used for Z height, only Quad Gantry Leveling
##	Z_MAX on mcu_z
##	If your probe is NO instead of NC, add change pin to !z:P0.10
pin: ^z:P0.10
#pin: !z:P0.10
x_offset: 0
y_offset: 19.75
z_offset: -17.180 # Klicky as Endstop
speed: 7.5
lift_speed: 30.0
samples: 5
samples_result: median
sample_retract_dist: 0.8
samples_tolerance: 0.006
samples_tolerance_retries: 25

#####################################################################
# 	Mesh
#   For diagnostics
#####################################################################

[bed_mesh]
speed: 500
horizontal_move_z: 10
mesh_min: 25,25
mesh_max: 275,275
probe_count: 6,6
#                  |
#    | X | X | X | X | X | X | X |
#    | X | X | X | X | X | X | X |
#    | X | X | X | X | X | X | X |
#  - | X | X | X | X | X | X | X | -
#    | X | X | X | X | X | X | X |
#    | X | X | X | X | X | X | X |
#    | X | X | X | X | X | X | X |
#                  |
zero_reference_position: 175, 255.25
#zero_reference_position: 150, 150 # Klicky as Endstop
#zero_reference_position: 149.987,149.987 # mesh point
fade_start: 0.5
fade_end: 10.0
split_delta_z: .025
move_check_distance: 5.0
mesh_pps: 2,2
algorithm: bicubic
bicubic_tension: 0.2


#####################################################################
# 	Fan Control
#####################################################################

[heater_fan hotend_fan]
##	Hotend Fan - XYE board, HE1 Connector
pin: P2.4
max_power: 1
kick_start_time: 0.5
shutdown_speed: 0
heater: extruder
heater_temp: 50.0
##	If you are experiencing back flow, you can reduce fan_speed
#fan_speed: 1.0

[fan]
##	Print Cooling Fan - XYE board, Fan Pin
pin: P2.3
kick_start_time: 0.5
##	Depending on your fan, you may need to increase this value
##	if your fan will not start. Can change cycle_time (increase)
##	if your fan is not able to slow down effectively
off_below: 0.10

[heater_fan controller_fan]
##	Controller fan - Z board, HE1 Connector
pin: z:P2.4
kick_start_time: 0.5
heater: heater_bed
heater_temp: 45.0
fan_speed: 0.35 # quiet mode

#[heater_fan exhaust_fan]
##	Exhaust fan - Z board, HE0 Connector
#pin: z:P2.7
#max_power: 1.0
#shutdown_speed: 0.0
#kick_start_time: 5.0
#heater: heater_bed
#heater_temp: 60
#fan_speed: 1.0


#####################################################################
# 	Homing and Gantry Adjustment Routines
#####################################################################

[idle_timeout]
timeout: 1800

# [safe_z_home]
# home_xy_position: 203.70, 303.90
#   A X,Y coordinate (e.g. 100,100) where the Z homing should be
#   performed. This parameter must be provided.
# speed: 150
#   Speed at which the toolhead is moved to the safe Z home
#   coordinate. The default is 50 mm/s
# z_hop: 5.0
#   Distance (in mm) to lift the Z axis prior to homing. This is
#   applied to any homing command, even if it doesn't home the Z axis.
#   If the Z axis is already homed and the current Z position is less
#   than z_hop, then this will lift the head to a height of z_hop. If
#   the Z axis is not already homed, then prior to any XY homing
#   movement the Z axis boundary checks are disabled and the head is
#   lifted by z_hop. If z_hop is specified, be sure to home the Z
#   immediately after any XY home requests so that the Z boundary
#   checks are accurate. The default is to not implement Z hop.
# z_hop_speed: 600.0
#   Speed (in mm/s) at which the Z axis is lifted prior to homing. The
#   default is 20mm/s.
# move_to_previous: False
#   When set to True, xy are reset to their previous positions after z
#   homing. The default is False.

[quad_gantry_level]
##	Use QUAD_GANTRY_LEVEL to level a gantry.
##	Min & Max gantry corners - measure from nozzle at MIN (0,0) and
##	MAX (250, 250), (300,300), or (350,350) depending on your printer size
##	to respective belt positions

#--------------------------------------------------------------------
##	Gantry Corners for 250mm Build
##	Uncomment for 250mm build
#gantry_corners:
#	-60,-10
#	310, 320
##	Probe points
#points:
#	50,25
#	50,175
#	200,175
#	200,25

##	Gantry Corners for 300mm Build
##	Uncomment for 300mm build
gantry_corners:
	-60,-10
	360,370
##	Probe points
points:
	50,25
	50,225
	250,225
	250,25

##	Gantry Corners for 350mm Build
##	Uncomment for 350mm build
#gantry_corners:
#	-60,-10
#	410,420
##	Probe points
#points:
#	50,25
#	50,275
#	300,275
#	300,25

#--------------------------------------------------------------------
speed: 500 # default: 100
horizontal_move_z: 20 # default: 10
retries: 10
retry_tolerance: 0.01
max_adjust: 15

#####################################################################
#   Respond / M118
#####################################################################

[respond]
default_type: echo

#####################################################################
#   Filament sensor
#####################################################################

[filament_switch_sensor filament]
pause_on_runout: True
switch_pin: !P1.26
runout_gcode:
    SET_IDLE_TIMEOUT TIMEOUT=172800  ; 48h
    M118 =========================
    M118 Filament runout detected
    M118 =========================
    M118 Warning! Idle timeout
    M118 will be reached in 48h
    #M600

#####################################################################
#  Skew correction
#####################################################################
[skew_correction]
# 20210226
# SET_SKEW XY=140.52,140.75,99.52

# 20220314
# xy_skew = 0.00461964085577
# xz_skew = 0.0
# yz_skew = 0.0

# 20230821
# xy_skew = -0.0045364741291
# xz_skew = 0.0
# yz_skew = 0.0

#####################################################################
#  Resonance tester
#####################################################################
# command: SHAPER_CALIBRATE
#[include resonance_tester.cfg]

#####################################################################
# Input Shaper
#####################################################################
[include input_shaper.cfg]

#####################################################################
# 	Displays
#####################################################################

## 	Uncomment the display that you have. Display connects to Z MCU
#--------------------------------------------------------------------

#[display]
##	RepRapDiscount 128x64 Full Graphic Smart Controller
#lcd_type: st7920
#cs_pin: z:P1.19
#sclk_pin: z:P1.20
#sid_pin: z:P1.18
#menu_timeout: 40
#encoder_pins: ^z:P3.26, ^z:P3.25
#click_pin: ^!z:P0.28

#[output_pin beeper]
#pin: z:P1.30

#--------------------------------------------------------------------

[display]
#	mini12864 LCD Display
lcd_type: uc1701
cs_pin: z:P1.18
a0_pin: z:P1.19
encoder_pins: ^z:P3.25,^z:P3.26
click_pin: ^!z:P0.28
contrast: 63
display_group: __voron_display

[neopixel fysetc_mini12864]
##	To control Neopixel RGB in mini12864 display
pin: z:P1.21
chain_count: 3
# Color: #79E425
initial_RED: 0.91
initial_GREEN: 0.87
initial_BLUE: 0.01
color_order: RGB

#	Set RGB values on boot up for each Neopixel.
#	Index 1 = display, Index 2 and 3 = Knob
[delayed_gcode setdisplayneopixel]
initial_duration: 1
gcode:
        #SET_LED LED=fysetc_mini12864 RED=1 GREEN=0.1 BLUE=0 INDEX=1 TRANSMIT=0
        #SET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0
        SET_LED LED=fysetc_mini12864 RED=0.125 GREEN=0.125 BLUE=0.125 INDEX=3 TRANSMIT=1

#--------------------------------------------------------------------

[display_glyph voron]
data:
 ......***.......
 ....*******.....
 ...*********....
 .*************..
 *****..***..***.
 ****..***..****.
 ***..***..*****.
 **..***..******.
 ******..***..**.
 *****..***..***.
 ****..***..****.
 ***..***..*****.
 .*************..
 ...*********....
 ....*******.....
 ......***.......

[display_template _vheater_temperature]
param_heater_name: "extruder"
text:
  {% if param_heater_name in printer %}
    {% set heater = printer[param_heater_name] %}
    # Show glyph
    {% if param_heater_name == "heater_bed" %}
      {% if heater.target %}
        {% set frame = (printer.toolhead.estimated_print_time|int % 2) + 1 %}
        ~bed_heat{frame}~
      {% else %}
        ~bed~
      {% endif %}
    {% else %}
      ~extruder~
    {% endif %}
    # Show temperature
    { "%3.0f" % (heater.temperature,) }
    # Optionally show target
    {% if heater.target and (heater.temperature - heater.target)|abs > 2 %}
      ~right_arrow~
      { "%0.0f" % (heater.target,) }
    {% endif %}
    ~degrees~
  {% endif %}

[display_data __voron_display extruder]
position: 0, 0
text: { render("_vheater_temperature", param_heater_name="extruder") }

[display_data __voron_display fan]
position: 0, 10
text:
  {% if 'fan' in printer %}
    {% set speed = printer.fan.speed %}
    {% if speed %}
      {% set frame = (printer.toolhead.estimated_print_time|int % 2) + 1 %}
      ~fan{frame}~
    {% else %}
      ~fan1~
    {% endif %}
    { "{:>4.0%}".format(speed) }
  {% endif %}

[display_data __voron_display bed]
position: 1, 0
text: { render("_vheater_temperature", param_heater_name="heater_bed") }

[display_data __voron_display progress_text]
position: 1, 10
text:
  {% set progress = printer.display_status.progress %}
  { "{:^6.0%}".format(progress) }

[display_data __voron_display progress_text2]
position: 1, 10
text:
  {% set progress = printer.display_status.progress %}
  { draw_progress_bar(1, 10, 6, progress) }

[display_data __voron_display printing_time]
position: 2, 10
text:
  {% set ptime = printer.idle_timeout.printing_time %}
  { "%02d:%02d" % (ptime // (60 * 60), (ptime // 60) % 60) }

#########################################################
# This section defines the actual chamber temp. field,
# replace 'temperature_sensor chamber' as necessary
#########################################################
[display_data __voron_display chamber]
position: 2, 0
text:
  {% set chamber = printer['temperature_sensor chamber'] %}
  ~chamber~
  { "%3.0f" % (chamber.temperature,) }
  ~degrees~

[display_data __voron_display print_status]
position: 3, 0
text:
  {% if printer.display_status.message %}
    { printer.display_status.message }
  {% elif printer.idle_timeout.printing_time %}
    {% set pos = printer.toolhead.position %}
    { "X%-4.0fY%-4.0fZ%-5.2f" % (pos.x, pos.y, pos.z) }
  {% else %}
    { "V2.1005 " }
  ~voron~
  {% endif %}

##### menu limits
[include printer_menu.cfg]
#####

#####################################################################
# 	chamber temp
#####################################################################
[temperature_sensor chamber]
sensor_type: ATC Semitec 104GT-2
sensor_pin: P0.23
min_temp: 0
max_temp: 100.0
gcode_id: C


[display_glyph chamber]
data:
  ................
  ****************
  *....*....*....*
  *....*....*....*
  *....******....*
  *..............*
  *..............*
  *.....****.....*
  *.***.*..*.***.*
  *.....****.....*
  *......**......*
  *..............*
  *.************.*
  *...*......*...*
  ****************
  ................


#####################################################################
#   RPI temp
#####################################################################

[temperature_sensor RPi]
sensor_type: temperature_host

#####################################################################
# 	Caselight
#####################################################################

# [output_pin caselight]
# pin: z:P2.5
# pwm: True
# shutdown_value: 0
# value: 0.5
# cycle_time: 0.01
# hardware_pwm: False

#####################################################################
# Support for gcode arc
#####################################################################
[gcode_arcs]
resolution: 0.05
#   An arc will be split into segments. Each segment's length will
#   equal the resolution in mm set above. Lower values will produce a
#   finer arc, but also more work for your machine. Arcs smaller than
#   the configured value will become straight lines. The default is
#   1mm.

#####################################################################
#   Idle timeout
#####################################################################

[idle_timeout]
gcode:
    TURN_OFF_HEATERS
    M84
timeout: 14400


#####################################################################
# 	Extensions
#####################################################################
[include klicky-probe.cfg]

#  Z_calibration needs <https://github.com/protoloft/klipper_z_calibration>
[include z_calibration.cfg]

[include bed_fans.cfg]

[include nevermore.cfg]


#####################################################################
# 	Macros
#####################################################################

[gcode_macro DUMP_VARIABLES]
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    
    {action_respond_info(out|join("\n"))}

# [gcode_macro M204]
# rename_existing:            M204.1
# gcode:
#   # Parameter
#     {% set S = params.S|default(-1)|float %}
#     {% set F = params.F|default(0.75)|float %}

#   # Script
#     {% if S != -1 %} # TODO is this in spec?
#         SET_VELOCITY_LIMIT ACCEL={ S } ACCEL_TO_DECEL={ S|float * F }
#     {% endif %}
# [gcode_macro M205]
# gcode:
#     {% if 'X' in params %}
#         SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={ X }
#     {% endif %}

[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
    G28
    QUAD_GANTRY_LEVEL
    G28
    # default: G0 X150 Y150 Z20 F6000
    G0 X150 Y150 Z10 F10000
    
    
[gcode_macro lights_off]
gcode:
        SET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0
        SET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0
        SET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=0 INDEX=3 TRANSMIT=1

[gcode_macro lights_on]
gcode:
        SET_LED LED=fysetc_mini12864 RED=0.910 GREEN=0.910 BLUE=0.010 INDEX=1 TRANSMIT=0
        SET_LED LED=fysetc_mini12864 RED=0.910 GREEN=0.910 BLUE=0.010 INDEX=2 TRANSMIT=0
        SET_LED LED=fysetc_mini12864 RED=0.125 GREEN=0.125 BLUE=0.125 INDEX=3 TRANSMIT=1

[gcode_macro prime_nozzle]
gcode:
    {% set x_offset = params.X_OFFSET|default(2)|int %}

    ;Set up for intro line
    G92 E0.0
    G1 Z5 F1800
    G1 X{x_offset} Y20 F9000
    #G1 Z0.28 F600
    G1 Z0.35 F600

    ;Begin printing intro line
    G1 Y200 E15.0 F2400 #F1500.0 ; intro line
    G1 X{x_offset}.6 F5000  ; move over
    G1 Y20 E15 F2000 #F1200.0 ; intro line

    ; Reset E
    G92 E0.0

[gcode_macro clean_nozzle]
# X 105.00 Y 304.00
gcode:
	MOVE_TO_WIPER
	{% for wipe in range(10) %}
		{% for coordinate in [(105,304),(65,304)] %}
			G0 X{coordinate[0]} Y{coordinate[1] - 0.25 * wipe} Z2.2 F18000
		{% endfor %}
	{% endfor %}
	G0 Z10

[gcode_macro move_to_wiper]
gcode:
	G0 X110 Y304 F18000
	G0 Z2.2

[gcode_macro move_to_camera]
# X 205.00 Y 300.00 Z 30.00
gcode:
	G0 X205 Y300 Z 30 F18000

[gcode_macro move_to_center]
# X 205.00 Y 300.00 Z 30.00
gcode:
	G0 X150 Y150 Z 150 F18000

[gcode_macro move_to_filamentchange]
# X 205.00 Y 300.00 Z 30.00
gcode:
	G0 X150 Y50 Z 150 F18000
	
[gcode_macro move_to_core_change]
# X 205.00 Y 300.00 Z 30.00
gcode:
	G0 X150 Y0 Z 240 F18000

# [virtual_pins]

# [output_pin Textured_print_surface]
# pin: virtual_pin:test_pin

[save_variables]
filename: ~/printer_data/config/save_variables.cfg
#   Required - provide a filename that would be used to save the
#   variables to disk e.g. ~/variables.cfg

[gcode_macro TOGGLE_TEXTURED_BED]
gcode:
    ; gcode variable take time to change, so use a tmp variable instead
    {% set flippedState = not(printer.save_variables.variables.textured_print_surface) %}
    
    SAVE_VARIABLE VARIABLE=textured_print_surface VALUE={ flippedState }
    
    {% if flippedState %}
        RESPOND TYPE=echo MSG="Enabled textured_print_surface offset"
    {% else %}
        RESPOND TYPE=echo MSG="Disabled textured_print_surface offset"
    {% endif %}

[gcode_macro _retract_filament_variables]
variable_deretract_lock: False
gcode:

[gcode_macro DERETRACT_FILAMENT_LOCK]
gcode:
    {% set REQ_STATUS = params.STATUS | default(1) | int %}
    SET_GCODE_VARIABLE MACRO=_retract_filament_variables VARIABLE=deretract_lock VALUE={ REQ_STATUS }


[gcode_macro RETRACT_FILAMENT]
gcode:
    {% set REQ_STATUS = params.STATUS | default(1) | int %}
    {% set deretrack_lock = printer["gcode_macro _retract_filament_variables"].deretract_lock %}

    ; gcode variable take time to change, so use a tmp variable instead
    {% set previous_status = printer.save_variables.variables.filament_retracted %}
    
    {% if previous_status != REQ_STATUS %}
      {% if REQ_STATUS %}
        G1 E-30 F600
        RESPOND TYPE=echo MSG="Retract Filament"
      {% else %}
        {% if not(deretrack_lock) %}    
          G1 E25 F600
          G1 E30 F300
          RESPOND TYPE=echo MSG="Deretract Filament"
        {% else %}
          RESPOND TYPE=echo MSG="Deretract Locked"
          {% set REQ_STATUS = previous_status %}
        {% endif %}
      {% endif %}
      {% else %}
      RESPOND TYPE=echo MSG="Filament already retracted/deretracted"
    {% endif %}

    SAVE_VARIABLE VARIABLE=filament_retracted VALUE={ REQ_STATUS }


# Conditional G28 (home if not already homed)
[gcode_macro CG28]
gcode:
    {% if "x" not in printer.toolhead.homed_axes or "y" not in printer.toolhead.homed_axes or "z" not in printer.toolhead.homed_axes %}
    G28
    {% endif %}

#####################################################################
# 	Macro heatsoak
#####################################################################

[include macro_heatsoak.cfg]

#####################################################################
# 	Print Warmup and Start
#####################################################################
# In SuSl/Prusa/Orca:
# PRINT_WARMUP EXTRUDER_TEMP=175 BED_TEMP=[bed_temperature_initial_layer_single] CHAMBER_TEMP=[chamber_temperature]
# PRINT_START EXTRUDER=[nozzle_temperature_initial_layer] BED=[bed_temperature_initial_layer_single] CHAMBER=[chamber_temperature]

[gcode_macro PRINT_WARMUP]
description: Perform initial homing and heating tasks
gcode:
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP | default(175) | float %}
    {% set BED_TEMP = params.BED_TEMP | default(105) | float %}
    {% set CHAMBER_TEMP = params.CHAMBER_TEMP | default(44) | float %}

    CG28                                 # home printer
    move_to_center

    {% if EXTRUDER_TEMP < 170 %}
      RESPOND TYPE=warning MSG='Requested extruder temperature below min!'
      {% set EXTRUDER_TEMP = 170 %}
    {% endif %}

    {% if CHAMBER_TEMP > 35 %}
      {% set CHAMBER_TEMP = 44 %}
      # Homing, QGL, pre-warming print nozzle etc.
      ###M104 S{EXTRUDER_TEMP * 0.75}         # set extruder temperature to 75%
      M104 S{EXTRUDER_TEMP}                   # set extruder temperature
      M190 S{BED_TEMP}                        # set bed temperature
      M109 S{EXTRUDER_TEMP}                   # wait for extruder
      # wait for the print bed to reach thermal equilibrium
      M117 Wait chatmp {CHAMBER_TEMP}c
      RESPOND TYPE=command MSG='Wait for min chamber temp {CHAMBER_TEMP}c'

      BEDFANS_ON
      M106 S255 ; Fan on
      DERETRACT_FILAMENT_LOCK STATUS=1 ; disable deretracts for warmup phase
      HEAT_SOAK HEATER='heater_bed' TARGET={BED_TEMP} SOAKER='temperature_sensor chamber' SOAK_TEMP={CHAMBER_TEMP}
    {% endif %}

[gcode_macro PRINT_START]
gcode:
  # Parameter
  {% set extruder_target_c = params.EXTRUDER|default(60)|int %}
  {% set bed_target_c = params.BED|default(105)|int %}
  {% set chamber_target_c = params.CHAMBER|default(60)|int %}
  {% set chamber_max_c = params.CHAMBER_HEATSOAK|default(43)|int %}
  {% set chamber_fan = printer['temperature_fan chamber'] %}

  # Script
    M141 S{chamber_target_c}          ; chamber to 60 deg C max
    BED_MESH_CLEAR    ; remove any bed mesh
    M117 Preparing print
    CG28 # 1. Home all axes
     
    G0 Z90 F7000
    G0 X150 Y150 F18000
    M190 S{bed_target_c}

    # preheat
    # must be done in the slicer gcode

    # 3. Get probe, make QGL or Z-Tilt, park probe if needed
    M117 QGL
    ATTACH_PROBE_LOCK
    QUAD_GANTRY_LEVEL
    #G28 Z # Klicky as Endstop
    #M117 Bedmesh


    # 7. create/load mesh if used
    #BED_MESH_CALIBRATE mesh_min={adaptive_bed_mesh_min[0]},{adaptive_bed_mesh_min[1]} mesh_max={adaptive_bed_mesh_max[0]},{adaptive_bed_mesh_max[1]} ALGORITHM=[bed_mesh_algo] PROBE_COUNT={bed_mesh_probe_count[0]},{bed_mesh_probe_count[1]} ADAPTIVE=1 ADAPTIVE_MARGIN=0
    BED_MESH_CALIBRATE
    DOCK_PROBE_UNLOCK
    #BED_MESH_PROFILE LOAD=mesh20201214_23

    SKEW_PROFILE LOAD=default

    # 4. Purge and clean the nozzle if available
    M117 Wipe 
    MOVE_TO_WIPER
    M109 S{extruder_target_c}

    # clean
    clean_nozzle

    # reset fan
    M106 S0
    # reset extruder
    G92 E0
    # 5. (Get probe), CALIBRATE_Z, (park probe)
    G28 Z # Klicky as Endstop
    CALIBRATE_Z

    # deretract from prev. print
    MOVE_TO_WIPER
    DERETRACT_FILAMENT_LOCK STATUS=0  ; enable deretracts if previously disabled
    RETRACT_FILAMENT STATUS=0
    clean_nozzle

    # 6. (Adjust z-offset if needed (e.g. textured plates))
    {% if printer.save_variables.variables.textured_print_surface %}
        RESPOND TYPE=error MSG="Set textured_print_surface offset"
        SET_GCODE_OFFSET Z_ADJUST=-0.0125 MOVE=1 # Textured
    {% endif %}

    # START NEVERMORE
    NEVERMORE_PRINT_START 

    # 8. Print intro line
    prime_nozzle

    # load skew
    SKEW_PROFILE LOAD=default
    
    # 9. Start printing...
    M117 Printing

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
  # Parameter
    {% set bed_target_c = params.BED|default(60)|int %}

  # Script
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    RETRACT_FILAMENT STATUS=1      ; retract filament
    G91                            ; relative positioning
    G0 Z1.00 X2.0 Y2.0 F20000      ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    G1 Z2 F7000                    ; move nozzle up 2mm
    G90                            ; absolute positioning
    G0  X150 Y301 F18000           ; park nozzle at rear

    # Move nozzle up, clearing print for access
    {% if printer.toolhead.position.z <= printer.toolhead.axis_maximum.z - 50 %}
      G91
      G0 Z50 F18000
      G90
    {% endif %}


    #SET_FAN_SPEED FAN=exhaust_fan SPEED=0.8
    M141 S60                       ; set chamber temp low to activate fan

    SET_SKEW CLEAR=1
    BED_MESH_CLEAR

    # Turn on bed again, so no preheat for next print needed. Adjust idle timeout.
    #SET_IDLE_TIMEOUT TIMEOUT=1800  ; 30 min
    SET_IDLE_TIMEOUT TIMEOUT=600  ; 10 min
    M190 S{bed_target_c}
  
    # Run Bedfans for 1 more minute
    UPDATE_DELAYED_GCODE ID=bedfans_off DURATION=60
    NEVERMORE_PRINT_END
    

[gcode_macro conditional_turn_off_heaters]
variable_condition: 1
gcode:
	{% if condition|int == 1 %}
		M104 S0
		M140 S0
	{% endif %}

[gcode_macro set_turn_off]
gcode:
	SET_GCODE_VARIABLE MACRO=conditional_turn_off_heaters VARIABLE=condition VALUE={params.CONDITION|default(1)|int}

# Set chamber temp macro (OctoPrint)

[gcode_macro M141]
# M141 - Set Chamber Temperature
gcode:
  # Parameter
    {% set S = params.S|default(0)|int %}

  # Script
  	#SET_TEMPERATURE_FAN_TARGET temperature_fan=chamber target={S}

[gcode_macro M600]
# M600 - Filament Change
gcode:
  # Parameter
    {% set X = params.X|default(175)|int %}
    {% set Y = params.Y|default(10)|int %}
    {% set Z = params.Z|default(20)|int %}

  # Script
    SAVE_GCODE_STATE NAME=ADVANCEDPAUSE
    PAUSE
    G91
    G1 Z{Z} F900
    G90
    G1 X{X} Y{Y} F18000
    RESTORE_GCODE_STATE NAME=ADVANCEDPAUSE

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
    #G1 E-30 F3600                  ; retract filament
    RETRACT_FILAMENT STATUS=1      ; retract filament
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %} 

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    #G1 E30 F480                  ; deretract filament
    RETRACT_FILAMENT STATUS=0    ; deretract filament
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}


[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE


## Ajust z-Offset relative to bed temp
[gcode_macro TEMPADJUSTOFFSET]
gcode:
  # Parameter
    {% set z_offset_abs_mm = 0|float %}  # edit to your filament settings
    {% set z_offset_petg_mm = -0.025|float %} # edit to your filament settings
    {% set z_offset_pla_mm = -0.05|float %}  # edit to your filament settings

  # Script
    #ABS
    {% if printer.heater_bed.target >= 100 %}
        SET_GCODE_OFFSET Z=0 MOVE=1
        SET_GCODE_OFFSET Z_ADJUST=z_offset_abs_mm MOVE=1
    {% endif %}
    #PETG
    {% if printer.heater_bed.target > 65 and printer.heater_bed.target < 100 %}
        SET_GCODE_OFFSET Z=0 MOVE=1
        SET_GCODE_OFFSET Z_ADJUST=z_offset_petg_mm MOVE=1
    {% endif %}
    #PLA
    {% if printer.heater_bed.target <= 65 %}
        SET_GCODE_OFFSET Z=0 MOVE=1
        SET_GCODE_OFFSET Z_ADJUST=z_offset_pla_mm MOVE=1
    {% endif %}

## 	Thermistor Types
##   "EPCOS 100K B57560G104F"
##   "ATC Semitec 104GT-2"
##   "NTC 100K beta 3950"
##   "Honeywell 100K 135-104LAG-J01"
##   "NTC 100K MGB18-104F39050L32" (Keenovo Heater Pad)
##   "AD595"
##   "PT100 INA826"

[include moonraker_obico_macros.cfg]
#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 41.572
#*# pid_ki = 1.952
#*# pid_kd = 221.367
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 31.924
#*# pid_ki = 2.418
#*# pid_kd = 105.349
#*#
#*# [input_shaper]
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  0.087503, 0.060003, 0.025003, 0.017503, 0.025003, 0.047503, 0.065003
#*# 	  0.075003, 0.050003, 0.015003, 0.012503, 0.037503, 0.042503, 0.057503
#*# 	  0.062503, 0.037503, -0.009997, 0.000003, 0.020003, 0.032503, 0.047503
#*# 	  0.065003, 0.032503, -0.007497, 0.000003, 0.002503, 0.015003, 0.045003
#*# 	  0.057503, 0.027503, 0.000003, -0.022497, 0.015003, 0.037503, 0.050003
#*# 	  0.065003, 0.030003, 0.025003, 0.007503, 0.017503, 0.042503, 0.065003
#*# 	  0.075003, 0.047503, 0.022503, 0.030003, 0.047503, 0.060003, 0.080003
#*# tension = 0.2
#*# min_x = 25.0
#*# algo = bicubic
#*# y_count = 7
#*# mesh_y_pps = 2
#*# min_y = 25.0
#*# x_count = 7
#*# max_y = 274.96
#*# mesh_x_pps = 2
#*# max_x = 274.96
#*#
#*# [skew_correction default]
#*# xy_skew = 0.00298275071232
#*# xz_skew = 0.0
#*# yz_skew = 0.0
