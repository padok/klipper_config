## This is a simple include for the Bedfans. To use it with your printer, edit
## the pin definition in line 16 so it matches your printer.
## What you get:
## - a generic fan "Bedfans" which is adjustable in GCODE and in Mainsail/Fluidd
## - Commands in your 12864-controller to turn the fan on/off or adjust in 10%-steps
## - a Macro to turn the fan off some time after the print.
##
## Slicer integration: Add "SET_FAN_SPEED FAN=Bedfans SPEED=1" in your start-macro
## (or less fan depending on your needs, like SPEED=0.8)
## in your end print code, add "UPDATE_DELAYED_GCODE ID=bedfans_off DURATION=180"
## this keeps your Bedfans running for 180s after the print finishes to clean the chamber a bit more.

[fan_generic Bedfans]
## Bedfans - FAN5 on Octopus
## Adjust if you use a different board or a different terminal.
pin: P2.5
max_power: 0.5 # quiet mode

[menu __main __control __bedfansonoff]
type: command
name: Bedfans {'ON' if printer['fan_generic Bedfans'].speed > 0 else 'OFF'}
enable: {'fan_generic Bedfans' in printer}
gcode:
    TOGGLE_BEDFANS

[menu __main __control __bedfansspeed]
type: input
enable: {'fan_generic Bedfans' in printer}
name: Bedfans %: {'%3d' % (menu.input*100)}%
input: {printer["fan_generic Bedfans"].speed}
input_min: 0
input_max: 1
input_step: 0.1
gcode:
    SET_FAN_SPEED FAN=Bedfans SPEED={menu.input}

[delayed_gcode bedfans_off]
gcode:
    SET_FAN_SPEED FAN=Bedfans SPEED=0

[gcode_macro BEDFANS_ON]
gcode:
    SET_FAN_SPEED FAN=Bedfans SPEED=1

[gcode_macro BEDFANS_OFF]
gcode:
    SET_FAN_SPEED FAN=Bedfans SPEED=0

[gcode_macro TOGGLE_BEDFANS]
gcode:
    {% if printer['fan_generic Bedfans'].speed > 0 %}
      BEDFANS_OFF
    {% else %}
      BEDFANS_ON
    {% endif %}